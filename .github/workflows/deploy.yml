# .github/workflows/deploy.yml
name: Deploy FamLink to CasaOS

on:
  push:
    branches: [ main, production ]
  workflow_dispatch:

env:
  DEPLOYMENT_PATH: /DATA/AppData/famlink

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP 8.4
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, dom, fileinfo, pgsql, sqlite3, gd, bcmath
        coverage: none
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      
    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
        
    - name: Cache Bun dependencies
      uses: actions/cache@v4
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: ${{ runner.os }}-bun-
        
    - name: Setup build environment
      run: |
        mkdir -p database
        touch database/database.sqlite
        chmod 664 database/database.sqlite
        cp .env.example .env
        sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=sqlite/' .env
        sed -i 's|DB_DATABASE=.*|DB_DATABASE=database/database.sqlite|' .env
        
    - name: Install Composer dependencies
      run: composer install --no-dev --optimize-autoloader --no-interaction
      
    - name: Generate application key
      run: php artisan key:generate
      
    - name: Install Bun dependencies
      run: bun install --frozen-lockfile
      
    - name: Create testing environment
      run: |
        mkdir -p database
        touch database/database.sqlite
        chmod 664 database/database.sqlite
        cp .env.example .env.testing
        sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=sqlite/' .env.testing
        sed -i 's|DB_DATABASE=.*|DB_DATABASE=database/database.sqlite|' .env.testing
        
    - name: Install Composer dependencies
      run: composer install --no-dev --optimize-autoloader --no-interaction
        
    - name: Generate testing key
      run: php artisan key:generate --env=testing
        
    - name: Run tests
      run: php artisan test --parallel
      continue-on-error: true
      
    - name: Build production assets
      run: bun run build
      
    - name: Optimize Laravel
      run: |
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP 8.4
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, dom, fileinfo, pgsql, sqlite3
        coverage: none
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      
    - name: Setup build environment
      run: |
        mkdir -p database
        touch database/database.sqlite
        chmod 664 database/database.sqlite
        cp .env.example .env
        sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=sqlite/' .env
        sed -i 's|DB_DATABASE=.*|DB_DATABASE=database/database.sqlite|' .env
        
    - name: Install dependencies
      run: |
        composer install --no-dev --optimize-autoloader --no-interaction
        bun install --frozen-lockfile
        
    - name: Generate application key
      run: php artisan key:generate
        
    - name: Build production assets
      run: bun run build
      
    - name: Optimize Laravel
      run: |
        php artisan config:cache
        php artisan route:cache  
        php artisan view:cache
        
    - name: Create deployment archive
      run: |
        echo "📦 Creating deployment archive..."
        pwd
        ls -la
        echo "Checking disk space..."
        df -h .
        echo "Creating archive with tar..."
        tar --exclude='node_modules' --exclude='.git' --exclude='.github' --exclude='tests' --exclude='storage/logs/*' --exclude='storage/framework/cache/*' --exclude='storage/framework/sessions/*' --exclude='storage/framework/views/*' --exclude='.env*' --exclude='*.log' -czf famlink-deployment.tar.gz * .[^.]*
        echo "✅ Archive creation completed"
        ls -lh famlink-deployment.tar.gz || echo "Archive not found"
        echo "Archive size check:"
        du -sh famlink-deployment.tar.gz || echo "Could not check archive size"
          
    - name: Deploy to CasaOS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.CASAOS_HOST }}
        username: ${{ secrets.CASAOS_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || '22' }}
        script: |
          set -e
          
          echo "🚀 Starting deployment to CasaOS..."
          
          # Create deployment directory
          sudo mkdir -p ${{ env.DEPLOYMENT_PATH }}/deployments
          cd ${{ env.DEPLOYMENT_PATH }}
          
          # Backup current deployment
          if [ -d "current" ]; then
            echo "📦 Backing up current deployment..."
            sudo mv current deployments/backup-$(date +%Y%m%d-%H%M%S)
            
            # Keep only last 3 backups
            sudo find deployments/ -name "backup-*" -type d | sort -r | tail -n +4 | xargs sudo rm -rf 2>/dev/null || true
          fi
          
          # Create new deployment directory
          sudo mkdir -p current
          
    - name: Upload deployment archive
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.CASAOS_HOST }}
        username: ${{ secrets.CASAOS_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || '22' }}
        source: "famlink-deployment.tar.gz"
        target: "${{ env.DEPLOYMENT_PATH }}/"
        
    - name: Extract and configure application
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.CASAOS_HOST }}
        username: ${{ secrets.CASAOS_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || '22' }}
        script: |
          set -e
          cd ${{ env.DEPLOYMENT_PATH }}
          
          echo "📁 Extracting deployment archive..."
          sudo tar -xzf famlink-deployment.tar.gz -C current/ --strip-components=1
          
          # Copy environment file
          if [ -f ".env.production" ]; then
            sudo cp .env.production current/.env
            echo "✅ Using existing .env.production"
          else
            echo "⚠️  No .env.production found, using .env.example"
            sudo cp current/.env.example current/.env
            # Update environment for production
            sudo sed -i 's/APP_ENV=.*/APP_ENV=production/' current/.env
            sudo sed -i 's/APP_DEBUG=.*/APP_DEBUG=false/' current/.env
            sudo sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=sqlite/' current/.env
            sudo sed -i 's|DB_DATABASE=.*|DB_DATABASE=/var/www/html/database/database.sqlite|' current/.env
          fi
          
          # Create required directories
          sudo mkdir -p current/database current/storage/app/public current/storage/logs current/bootstrap/cache
          
          # Create SQLite database if it doesn't exist
          if [ ! -f current/database/database.sqlite ]; then
            sudo touch current/database/database.sqlite
            sudo chmod 664 current/database/database.sqlite
          fi
          
          # Set proper permissions
          sudo chown -R 1000:1000 current/
          sudo chmod -R 775 current/storage current/bootstrap/cache
          
          echo "🐳 Starting Docker containers..."
          cd current
          
          # Stop existing containers
          sudo docker compose down --remove-orphans 2>/dev/null || true
          
          # Start new containers
          sudo docker compose up -d --build
          
          # Wait for containers to be ready
          echo "⏳ Waiting for application to be ready..."
          sleep 30
          
          # Clean up
          cd ..
          sudo rm -f famlink-deployment.tar.gz
          
          echo "✅ Deployment completed successfully!"
          
    - name: Health check
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.CASAOS_HOST }}
        username: ${{ secrets.CASAOS_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || '22' }}
        script: |
          cd ${{ env.DEPLOYMENT_PATH }}/current
          
          echo "🔍 Checking container status..."
          if ! sudo docker compose ps | grep -q "Up"; then
            echo "❌ Deployment failed - containers not running"
            echo "📋 Container logs:"
            sudo docker compose logs
            exit 1
          fi
          
          echo "📊 Container status:"
          sudo docker compose ps
          
          # Wait a bit more for the application to fully start
          sleep 15
          
          # Test application health by checking if the container is responding
          CONTAINER_NAME=$(sudo docker compose ps --format "table {{.Names}}" | grep famlink-app | head -1)
          
          if [ -n "$CONTAINER_NAME" ]; then
            echo "🔍 Testing application health in container: $CONTAINER_NAME"
            
            # Try to execute a simple health check inside the container
            if sudo docker exec $CONTAINER_NAME curl -f http://localhost/ > /dev/null 2>&1; then
              echo "✅ Health check passed - Application is running!"
              echo "🌐 Application should be accessible via Nginx Proxy Manager"
            else
              echo "⚠️  Container is running but application may not be fully ready yet"
              echo "📋 Checking Laravel logs:"
              sudo docker exec $CONTAINER_NAME tail -20 /var/www/html/storage/logs/laravel.log 2>/dev/null || echo "No Laravel logs found"
            fi
          else
            echo "❌ Could not find famlink-app container"
            exit 1
          fi