# ==============================
# Stage 1: PHP dependencies
# ==============================
FROM composer:2 AS vendor

WORKDIR /app

# Install GD extension required by some packages
RUN apk add --no-cache --virtual .build-deps \
        freetype-dev libjpeg-turbo-dev libpng-dev \
    && apk add --no-cache \
        libpng libjpeg-turbo freetype \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install -j$(nproc) gd \
    && apk del .build-deps

# Copy only composer files (cache-friendly)
COPY composer.json composer.lock ./

# Install PHP dependencies optimized for production
RUN composer install \
    --no-dev \
    --optimize-autoloader \
    --no-interaction \
    --no-scripts \
    --prefer-dist


# ==============================
# Stage 2: Build Node.js assets
# ==============================
FROM php:8.4-cli AS node-builder

# Install system dependencies and PHP extensions needed for Laravel commands
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    unzip \
    libpng-dev \
    libjpeg-dev \
    libfreetype6-dev \
    libonig-dev \
    libxml2-dev \
    libzip-dev \
    libsqlite3-dev \
    libpq-dev \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install -j$(nproc) mbstring pdo pdo_sqlite pdo_pgsql bcmath gd xml zip \
    && apt-get remove -y libpng-dev libjpeg-dev libfreetype6-dev libonig-dev libxml2-dev libzip-dev libsqlite3-dev libpq-dev \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/*

# Install Bun (optimized for production builds)
RUN curl -fsSL https://bun.sh/install | bash && \
    cp ~/.bun/bin/bun /usr/local/bin/bun && \
    cp ~/.bun/bin/bunx /usr/local/bin/bunx && \
    chmod +x /usr/local/bin/bun /usr/local/bin/bunx

WORKDIR /app

# Copy only lock and manifest files first (better cache)
COPY package*.json bun.lockb* ./

# Install dependencies with frozen lockfile for reproducible builds
RUN bun install --frozen-lockfile

# Copy sources needed for build
COPY resources/ resources/
COPY public/ public/
COPY vite.config.ts tsconfig.json* ./

# Copy PHP application files needed for wayfinder
COPY app/ app/
COPY bootstrap/ bootstrap/
COPY config/ config/
COPY database/ database/
COPY routes/ routes/
COPY composer.json composer.lock artisan ./
# Copy .env.docker (Docker-specific environment file)
COPY .env.docker .env

# Copy vendor directory from vendor stage
COPY --from=vendor /app/vendor ./vendor

# Create Laravel storage directories with full structure
RUN mkdir -p storage/framework/{cache/data,sessions,views} storage/logs bootstrap/cache && \
    chmod -R 777 storage bootstrap/cache

# Build production assets
ENV NODE_ENV=production
RUN bunx vite build


# ==============================
# Stage 3: Application runtime
# ==============================
FROM php:8.4-fpm-alpine AS runtime

# Install runtime dependencies (optimized for production)
RUN apk add --no-cache \
        bash nginx curl supervisor tzdata \
        libpng libjpeg-turbo freetype postgresql-libs \
    && apk add --no-cache --virtual .build-deps \
        freetype-dev libjpeg-turbo-dev libpng-dev \
        oniguruma-dev libxml2-dev postgresql-dev sqlite-dev \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install -j$(nproc) \
        pdo pdo_pgsql pdo_sqlite mbstring exif pcntl bcmath gd opcache \
    && apk del .build-deps \
    && rm -rf /var/cache/apk/* /tmp/*

# OPcache production tuning for better performance
RUN { \
    echo 'opcache.enable=1'; \
    echo 'opcache.memory_consumption=128'; \
    echo 'opcache.interned_strings_buffer=8'; \
    echo 'opcache.max_accelerated_files=10000'; \
    echo 'opcache.validate_timestamps=0'; \
    echo 'opcache.revalidate_freq=0'; \
    echo 'opcache.jit=tracing'; \
    echo 'opcache.jit_buffer_size=100M'; \
} > /usr/local/etc/php/conf.d/opcache.ini

WORKDIR /var/www/html

# Create required directories with proper permissions
RUN mkdir -p \
    storage/logs storage/framework/{cache,sessions,views} \
    bootstrap/cache \
    && chown -R www-data:www-data /var/www/html \
    && chmod -R 755 storage bootstrap/cache

# Copy application source (filtered by .dockerignore)
COPY . .

# Generate .env file from Sevalla injected environment variables
RUN echo "# Generated .env file from Sevalla environment variables" > .env && \
    echo "APP_NAME=FamLink" >> .env && \
    echo "APP_ENV=production" >> .env && \
    echo "APP_KEY=${APP_KEY}" >> .env && \
    echo "APP_DEBUG=false" >> .env && \
    echo "APP_URL=${APP_URL}" >> .env && \
    echo "APP_LOCALE=da" >> .env && \
    echo "APP_FALLBACK_LOCALE=en" >> .env && \
    echo "APP_FAKER_LOCALE=da_DK" >> .env && \
    echo "DB_CONNECTION=pgsql" >> .env && \
    echo "DB_HOST=${DB_HOST}" >> .env && \
    echo "DB_PORT=${DB_PORT}" >> .env && \
    echo "DB_DATABASE=${DB_DATABASE}" >> .env && \
    echo "DB_USERNAME=${DB_USERNAME}" >> .env && \
    echo "DB_PASSWORD=${DB_PASSWORD}" >> .env && \
    echo "SESSION_DRIVER=database" >> .env && \
    echo "SESSION_LIFETIME=120" >> .env && \
    echo "SESSION_ENCRYPT=false" >> .env && \
    echo "CACHE_STORE=database" >> .env && \
    echo "QUEUE_CONNECTION=database" >> .env && \
    echo "FILESYSTEM_DISK=s3" >> .env && \
    echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> .env && \
    echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> .env && \
    echo "AWS_BUCKET=${AWS_BUCKET}" >> .env && \
    echo "AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}" >> .env && \
    echo "AWS_USE_PATH_STYLE_ENDPOINT=false" >> .env && \
    echo "MAIL_MAILER=smtp" >> .env && \
    echo "MAIL_HOST=${MAIL_HOST}" >> .env && \
    echo "MAIL_PORT=${MAIL_PORT}" >> .env && \
    echo "MAIL_USERNAME=${MAIL_USERNAME}" >> .env && \
    echo "MAIL_PASSWORD=${MAIL_PASSWORD}" >> .env && \
    echo "MAIL_ENCRYPTION=${MAIL_ENCRYPTION}" >> .env && \
    echo "MAIL_FROM_ADDRESS=${MAIL_FROM_ADDRESS}" >> .env && \
    echo "MAIL_FROM_NAME=FamLink" >> .env && \
    echo "REVERB_APP_ID=${REVERB_APP_ID}" >> .env && \
    echo "REVERB_APP_KEY=${REVERB_APP_KEY}" >> .env && \
    echo "REVERB_APP_SECRET=${REVERB_APP_SECRET}" >> .env && \
    echo "REVERB_HOST=${REVERB_HOST}" >> .env && \
    echo "REVERB_PORT=${REVERB_PORT}" >> .env && \
    echo "REVERB_SCHEME=${REVERB_SCHEME}" >> .env && \
    echo "VITE_REVERB_APP_KEY=${REVERB_APP_KEY}" >> .env && \
    echo "VITE_REVERB_HOST=${REVERB_HOST}" >> .env && \
    echo "VITE_REVERB_PORT=${REVERB_PORT}" >> .env && \
    echo "VITE_REVERB_SCHEME=${REVERB_SCHEME}" >> .env && \
    echo "VITE_APP_NAME=FamLink" >> .env && \
    echo "LOG_CHANNEL=stack" >> .env && \
    echo "LOG_STACK=single" >> .env && \
    echo "LOG_DEPRECATIONS_CHANNEL=null" >> .env && \
    echo "LOG_LEVEL=error" >> .env && \
    echo "VIZRA_ADK_DEFAULT_PROVIDER=${VIZRA_ADK_DEFAULT_PROVIDER:-gemini}" >> .env && \
    echo "VIZRA_ADK_DEFAULT_MODEL=${VIZRA_ADK_DEFAULT_MODEL:-gemini-2.0-flash}" >> .env && \
    echo "GEMINI_API_KEY=${GEMINI_API_KEY}" >> .env && \
    echo "OPENAI_API_KEY=${OPENAI_API_KEY}" >> .env && \
    echo "OPENROUTER_API_KEY=${OPENROUTER_API_KEY}" >> .env && \
    echo "MISTRAL_API_KEY=${MISTRAL_API_KEY}" >> .env && \
    echo "MCP_POSTGRES_URL=${MCP_POSTGRES_URL}" >> .env && \
    echo "MCP_POSTGRES_ENABLED=${MCP_POSTGRES_ENABLED:-true}" >> .env && \
    echo "MCP_PG_VECTOR_ENABLED=${MCP_PG_VECTOR_ENABLED:-true}" >> .env && \
    echo "MCP_PG_VECTOR_TABLE=${MCP_PG_VECTOR_TABLE:-vector_embeddings}" >> .env && \
    echo "MCP_PG_VECTOR_COLUMN=${MCP_PG_VECTOR_COLUMN:-embedding}" >> .env && \
    echo "GITHUB_TOKEN=${GITHUB_TOKEN}" >> .env && \
    echo "MCP_GITHUB_ENABLED=${MCP_GITHUB_ENABLED:-true}" >> .env

# Copy build artifacts & vendor from previous stages
COPY --from=node-builder /app/public/build ./public/build
COPY --from=vendor /app/vendor ./vendor

# Copy configuration and scripts
COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/supervisord.conf /etc/supervisord.conf
COPY docker/php-fpm.conf /usr/local/etc/php-fpm.d/www.conf
COPY docker/start.sh /start.sh

# Set timezone and make start script executable
RUN ln -snf /usr/share/zoneinfo/Europe/Copenhagen /etc/localtime \
    && echo Europe/Copenhagen > /etc/timezone \
    && chmod +x /start.sh

# Health check for Sevalla deployment
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost/test || exit 1

EXPOSE 80

CMD ["/start.sh"]
