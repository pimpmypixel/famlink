import { Construct } from 'constructs';
import * as secretsmanager from 'aws-cdk-lib/aws-secretsmanager';
import * as ssm from 'aws-cdk-lib/aws-ssm';

export interface SecretsManagerConstructProps {
  /**
   * Application name for naming secrets
   * @default famlink
   */
  readonly appName?: string;
  /**
   * Environment name
   * @default dev
   */
  readonly environment?: string;
}

export class SecretsManagerConstruct extends Construct {
  public readonly appSecrets: secretsmanager.Secret;
  public readonly dbSecret: secretsmanager.ISecret;

  constructor(scope: Construct, id: string, props: SecretsManagerConstructProps = {}) {
    super(scope, id);

    const { appName = 'famlink', environment = 'dev' } = props;
    const prefix = `${appName}-${environment}`;

    // Application secrets (API keys, etc.)
    this.appSecrets = new secretsmanager.Secret(this, 'AppSecrets', {
      secretName: `${prefix}-app-secrets`,
      description: `Application secrets for ${appName} ${environment}`,
      generateSecretString: {
        secretStringTemplate: JSON.stringify({
          APP_KEY: '', // Will be generated by Laravel
          AWS_ACCESS_KEY_ID: '',
          AWS_SECRET_ACCESS_KEY: '',
          VITE_APP_NAME: appName,
        }),
        generateStringKey: 'random-secret',
        excludeCharacters: '/@" ',
      },
    });

    // Database secret (handled by RDS construct, but referenced here)
    // This would typically be created in the RDS construct
    this.dbSecret = secretsmanager.Secret.fromSecretNameV2(
      this,
      'DbSecret',
      `${prefix}-db-secret`
    );

    // SSM Parameters for non-sensitive configuration
    const appConfigParam = new ssm.StringParameter(this, 'AppConfig', {
      parameterName: `/${prefix}/config/app`,
      stringValue: JSON.stringify({
        APP_NAME: appName,
        APP_ENV: environment,
        APP_DEBUG: environment === 'dev' ? 'true' : 'false',
        LOG_CHANNEL: 'stack',
        CACHE_DRIVER: 'database',
        QUEUE_CONNECTION: 'database',
        SESSION_DRIVER: 'database',
      }),
    });

    const dbConfigParam = new ssm.StringParameter(this, 'DbConfig', {
      parameterName: `/${prefix}/config/database`,
      stringValue: JSON.stringify({
        DB_CONNECTION: 'pgsql',
        DB_HOST: '', // Will be filled from RDS output
        DB_PORT: '5432',
        DB_DATABASE: appName,
        DB_USERNAME: '', // Will be filled from secret
      }),
    });
  }
}
